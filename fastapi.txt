pip install fastapi uvicorn


from fastapi import FastAPI, HTTPException
from pydantic import BaseModel, Field
from typing import List

# Инициализация приложения
app = FastAPI(title="ToDo App")

# Pydantic модель для задачи
class Task(BaseModel):
    id: int
    title: str = Field(..., max_length=100, description="Название задачи")
    description: str = Field(None, description="Описание задачи")
    completed: bool = False

# Модель для добавления задачи
class TaskCreate(BaseModel):
    title: str = Field(..., max_length=100, description="Название задачи")
    description: str = Field(None, description="Описание задачи")

# Хранилище задач (временное, в памяти)
tasks: List[Task] = []

# Генерация ID для задач
def get_next_id() -> int:
    return len(tasks) + 1

# Ручка для получения списка задач
@app.get("/tasks", response_model=List[Task], summary="Получить список всех задач")
async def get_tasks():
    return tasks

# Ручка для добавления новой задачи
@app.post("/tasks", response_model=Task, summary="Создать новую задачу")
async def create_task(task_data: TaskCreate):
    task = Task(id=get_next_id(), **task_data.dict())
    tasks.append(task)
    return task

# Ручка для получения задачи по ID
@app.get("/tasks/{task_id}", response_model=Task, summary="Получить задачу по ID")
async def get_task(task_id: int):
    task = next((t for t in tasks if t.id == task_id), None)
    if not task:
        raise HTTPException(status_code=404, detail="Задача не найдена")
    return task

# Ручка для изменения статуса задачи
@app.put("/tasks/{task_id}/complete", response_model=Task, summary="Отметить задачу как выполненную")
async def complete_task(task_id: int):
    task = next((t for t in tasks if t.id == task_id), None)
    if not task:
        raise HTTPException(status_code=404, detail="Задача не найдена")
    task.completed = True
    return task